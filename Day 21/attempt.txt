package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
)

var all_paths [][]rune
var max_depth_projection int = 3

func main() {
	file, _ := os.Open("test.txt")
	defer file.Close()
	reader := bufio.NewScanner(file)
	var targets []string

	for reader.Scan() {
		line := reader.Text()
		targets = append(targets, line)
	}

	var numpad [][]rune = [][]rune{
		{'7', '8', '9'},
		{'4', '5', '6'},
		{'1', '2', '3'},
		{'n', '0', 'A'},
	}

	var dirpad [][]rune = [][]rune{
		{'n', '^', 'A'},
		{'<', 'v', '>'},
	}

	var total int = 0
	for _, target := range targets {
		var starting []rune
		for _, char := range target {
			starting = append(starting, char)
		}
		robot_one_req := get_commands(numpad, starting, 0)
		robot_two_req := get_commands(dirpad, robot_one_req, 1)
		robot_three_req := get_commands(dirpad, robot_two_req, 2)
		num, _ := strconv.Atoi(string([]rune(target[:len(target)-1])))
		total += len(robot_three_req) * num

	}

	fmt.Printf("AOC Day 21 Part 1 Total: %d", total)

}

func validate_paths(pad [][]rune, target rune, start_x int, start_y int) {
	var valid_paths [][]rune

	for _, array := range all_paths {
		if validate(pad, target, array, start_x, start_y) {
			valid_paths = append(valid_paths, array)
		}
	}

	all_paths = valid_paths
}

// func least_moves(array []rune) int {
// 	var size = 0
// 	var last_dir rune = '.'
// 	for _, dir := range array {
// 		if dir != last_dir {
// 			size++
// 		}
// 		last_dir = dir
// 	}
// 	return size
// }

// func closest_to_a(input [][]rune) []rune {
// 	var weight = make(map[rune]int)
// 	weight['A'] = 0
// 	weight['^'] = 1
// 	weight['>'] = 1
// 	weight['v'] = 1
// 	weight['<'] = 1
// 	var output []rune

// 	for _, item := range input {
// 		if len(output) == 0 || weight[item[0]] < weight[output[0]] {
// 			output = item
// 		}
// 	}

// 	return output
// }

func project(paths [][]rune, max int) []rune {
	var result []rune

	temp_all_paths := make([][]rune, len(all_paths))
	for i := range all_paths {
		temp_all_paths[i] = make([]rune, len((all_paths)[i]))
		copy(temp_all_paths[i], (all_paths)[i])
	}

	var pad [][]rune = [][]rune{
		{'n', '^', 'A'},
		{'<', 'v', '>'},
	}

	for _, path := range paths {
		var moves []rune
		var x = 2
		var y = 0

		for _, target := range path {
			vis := set_false(4)
			all_paths = [][]rune{}
			get_shortest_path(pad, x, y, vis, target, []rune{})
			validate_paths(pad, target, x, y)

			var shortest_inner = 0
			var selected = 0
			var one []int
			var check_array [][]rune

			for i, array := range all_paths {
				if shortest_inner == 0 || shortest_inner > len(array) {
					shortest_inner = len(array)
					selected = i
				}
			}

			for i, array := range all_paths {
				if shortest_inner == len(array) {
					one = append(one, i)
					check_array = append(check_array, array)
				}
			}

			var temp []rune
			if len(one) > 1 {
				if max < max_depth_projection {
					temp = project(check_array, max+1)
				} else {
					temp = all_paths[selected]
				}
			} else {
				temp = all_paths[selected]
			}

			moves = append(moves, temp...)
			moves = append(moves, 'A')
			x, y = get_start_pos(pad, target)
		}

	}

	all_paths = temp_all_paths

	return result
}

func find_shortest(depth int) []rune {
	var shortest = 0
	var selected = 0
	var one []int
	var check_array [][]rune

	for i, array := range all_paths {
		if shortest == 0 || shortest > len(array) {
			shortest = len(array)
			selected = i
		}
	}

	for i, array := range all_paths {
		if shortest == len(array) {
			one = append(one, i)
			check_array = append(check_array, array)
		}
	}

	var temp []rune
	if len(one) > 1 {
		temp = project(check_array, depth)
		// println()
	} else {
		temp = all_paths[selected]
	}

	return temp
}

func get_commands(pad [][]rune, targets []rune, depth int) []rune {
	var result []rune

	x, y := get_start_pos(pad, 'A')

	for _, target := range targets {
		vis := set_false(4)
		all_paths = [][]rune{}
		get_shortest_path(pad, x, y, vis, target, []rune{})
		validate_paths(pad, target, x, y)
		temp := find_shortest(depth)
		result = append(result, temp...)
		result = append(result, 'A')
		x, y = get_start_pos(pad, target)
	}

	return result
}

func set_false(size int) [][]bool {
	visited := make([][]bool, size)
	for i := range visited {
		visited[i] = make([]bool, size)
	}
	return visited
}

func get_start_pos(grid [][]rune, target rune) (int, int) {
	for i, line := range grid {
		for d, char := range line {
			if char == target {
				return d, i
			}
		}
	}

	return 0, 0
}

func get_shortest_path(grid [][]rune, x int, y int, vis [][]bool, end rune, path []rune) {
	if grid[y][x] == end {
		// Create a copy of the path before appending
		pathCopy := make([]rune, len(path))
		copy(pathCopy, path)
		all_paths = append(all_paths, pathCopy)
		return
	}

	vis[y][x] = true
	directions := []struct {
		dx, dy int
		move   rune
	}{
		{-1, 0, '<'}, {1, 0, '>'}, {0, -1, '^'}, {0, 1, 'v'},
	}

	for _, dir := range directions {
		newX, newY := x+dir.dx, y+dir.dy
		if newY >= 0 && newY < len(grid) &&
			newX >= 0 && newX < len(grid[0]) &&
			grid[newY][newX] != 'n' && !vis[newY][newX] {

			new_path := append(path, dir.move)
			get_shortest_path(grid, newX, newY, vis, end, new_path)
		}
	}

	vis[y][x] = false
}

func validate(pad [][]rune, target rune, path []rune, start_x int, start_y int) bool {
	var x = start_x
	var y = start_y

	for _, char := range path {
		if char == '<' {
			x -= 1
		} else if char == '>' {
			x += 1
		} else if char == '^' {
			y -= 1
		} else if char == 'v' {
			y += 1
		}
	}

	if x >= 0 && y >= 0 && x < len(pad[0]) && y < len(pad) && pad[y][x] == target {
		return true
	}

	return false
}
